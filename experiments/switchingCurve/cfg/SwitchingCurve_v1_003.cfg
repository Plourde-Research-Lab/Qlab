
SoftwareDevelopmentMode     0 #In software developement mode no instruments are really used

# InstrumentNames is redundent and is only used for error checking.  Instrumentnames
# should enumerate the name assigned to each instrument being used.  The names should be descriptive
# of the instruments function in this particular experiment for example 'flux_bias' or 
# 'ReadoutPulseAWG'.
# InstrumentNames                         {'AWG';'flux_bias';'counter'}

# number of steps in experiment loop
#numSteps                  	10  #number of steps between initial and final values
expType                     SwitchingCurve #[SwitchingCurve]

#######################################################################
#######################################################################
#######################################################################

LoopParams.v1_amp.name                         v1_loop #Loop name
LoopParams.v1_amp.number                       1 # 1-3, 1 being the innermost
LoopParams.v1_amp.steps                        2 # number of iterations
LoopParams.v1_amp.taskName                     {'v1_pulse';'v2_pulse';'v2_pulse'} # which task does it pertain to?
LoopParams.v1_amp.parameter                    {'maxAmp';'maxAmp';'maxAmp'} # which parameter will be changed
LoopParams.v1_amp.plotRange.start              1
LoopParams.v1_amp.plotRange.end                10                    

#LoopParams.MicrowaveModulation.name                         MicrowaveModulation #Loop name
#LoopParams.MicrowaveModulation.number                       2 # 1-3, 1 being the innermost
#LoopParams.MicrowaveModulation.steps                        2 # number of iterations
#LoopParams.MicrowaveModulation.taskName                     {'MicrowavePulse';'MicrowavePulse'} # which task does it pertain to?
#LoopParams.MicrowaveModulation.parameter                    {'time';'amp'} # if you change time, you also have to "change" amp
#LoopParams.MicrowaveModulation.plotRange.start              2
#LoopParams.MicrowaveModulation.plotRange.end                30        

LoopParams.MicrowaveFrequency.name                         MicrowaveFrequency #Loop name
LoopParams.MicrowaveFrequency.number                       2 # 1-3, 1 being the innermost
LoopParams.MicrowaveFrequency.steps                        5 # number of iterations
LoopParams.MicrowaveFrequency.taskName                     {'muwave'} # which task does it pertain to?
LoopParams.MicrowaveFrequency.parameter                    {'frequency'} # if you change time, you also have to "change" amp
LoopParams.MicrowaveFrequency.plotRange.start              2
LoopParams.MicrowaveFrequency.plotRange.end                30        

#######################################################################
#######################################################################
#######################################################################

# Note: the vector 'amp' is scaled to have a maximum absolute value of 1
# so the overall magnitude is unimportant.  Amplitude is adjusting by altering
# maxAmp.

# parameters for phase qubit flux pulse
ExpParams.v1_pulse.deviceTag           fluxPulse # which device do these parameters pertain to?
ExpParams.v1_pulse.deviceName          AWG # which device do these parameters pertain to?
ExpParams.v1_pulse.pulseCH      	   1 #output channel for pulse device 
ExpParams.v1_pulse.time.start          [0;1000;100000;1000;0]*1e-9 #in s
ExpParams.v1_pulse.time.end            [0;10;1000;10;0]*1e-9 #in s
ExpParams.v1_pulse.amp.start           [0;0;1;1;0] #dimensionless
ExpParams.v1_pulse.amp.end             [0;0;1;1;0] #dimensionless
ExpParams.v1_pulse.maxAmp.start        1 #in V
ExpParams.v1_pulse.maxAmp.end          2 #in V
ExpParams.v1_pulse.offset.start        0 #in V
ExpParams.v1_pulse.offset.end          0 #in V
ExpParams.v1_pulse.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine
ExpParams.v1_pulse.marker              [1;1] # turn marker1/marker2 on
ExpParams.v1_pulse.marker1Start        77000 # point at which marker pulse starts
ExpParams.v1_pulse.marker1Length       500 # number of points in marker pulse width
ExpParams.v1_pulse.marker1Amp          1.75 # marker pulse amp in Volts
ExpParams.v1_pulse.marker2Start        1 # point at which marker pulse starts
ExpParams.v1_pulse.marker2Length       1 # number of points in marker pulse width
ExpParams.v1_pulse.marker2Amp          1.75 # marker pulse amp in Volts
ExpParams.v1_pulse.wf_option           1 # [0 1] if wf_option is 1 then tekVisa is used to send waveforms

# parameters for phase qubit flux pulse
ExpParams.v2_pulse.deviceTag           fluxPulse # which device do these parameters pertain to?
ExpParams.v2_pulse.deviceName          AWG # which device do these parameters pertain to?
ExpParams.v2_pulse.pulseCH      	    2 #output channel for pulse device 
ExpParams.v2_pulse.time.start          [31000;1000;20000;100;0]*1e-9 #in s
ExpParams.v2_pulse.time.end            [110;10;300;10;0]*1e-9 #in s
ExpParams.v2_pulse.amp.start           [0;0;1;1;0] #dimensionless
ExpParams.v2_pulse.amp.end             [0;0;1;1;0] #dimensionless
ExpParams.v2_pulse.maxAmp.start        2 #in V
ExpParams.v2_pulse.maxAmp.end          1 #in V
ExpParams.v2_pulse.offset.start        0 #in V
ExpParams.v2_pulse.offset.end          0 #in V
ExpParams.v2_pulse.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine
ExpParams.v2_pulse.wf_option           1 # [0 1] if wf_option is 1 then tekVisa is used to send waveforms

# parameters for phase qubit flux pulse
ExpParams.v3_pulse.deviceTag           fluxPulse # which device do these parameters pertain to?
ExpParams.v3_pulse.deviceName          AWG # which device do these parameters pertain to?
ExpParams.v3_pulse.pulseCH      	    3 #output channel for pulse device 
ExpParams.v3_pulse.time.start          [51990;1/1.2;0;1/1.2;0]*1e-9 #in s
ExpParams.v3_pulse.time.end            [350;1/1.2;0;1/1.2;0]*1e-9 #in s
ExpParams.v3_pulse.amp.start           [0;0;1;1;0] #dimensionless
ExpParams.v3_pulse.amp.end             [0;0;1;1;0] #dimensionless
ExpParams.v3_pulse.maxAmp.start        1 #in V
ExpParams.v3_pulse.maxAmp.end          1 #in V
ExpParams.v3_pulse.offset.start        0 #in V
ExpParams.v3_pulse.offset.end          2 #in V
ExpParams.v3_pulse.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine
ExpParams.v3_pulse.wf_option           1 # [0 1] if wf_option is 1 then tekVisa is used to send waveforms

# parameters for microwave pulse
ExpParams.MicrowavePulse.deviceTag           fluxPulse # which device do these parameters pertain to?
ExpParams.MicrowavePulse.deviceName          AWG # which device do these parameters pertain to?
ExpParams.MicrowavePulse.pulseCH      	     4 #output channel for pulse device 
ExpParams.MicrowavePulse.time.start          [41000;1000;9988;100;0]*1e-9 #in s
ExpParams.MicrowavePulse.time.end            [300;0;50;0;0]*1e-9 #in s
ExpParams.MicrowavePulse.amp.start           [0;0;1;1;0] #dimensionless
ExpParams.MicrowavePulse.amp.end             [0;0;1;1;0] #dimensionless
ExpParams.MicrowavePulse.maxAmp.start      1 #in V
ExpParams.MicrowavePulse.maxAmp.end        1 #in V
ExpParams.MicrowavePulse.offset.start        0 #in V
ExpParams.MicrowavePulse.offset.end          0 #in V
ExpParams.MicrowavePulse.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine
ExpParams.MicrowavePulse.wf_option           1 # [0 1] if wf_option is 1 then tekVisa is used to send waveforms
#ExpParams.MicrowavePulse.frequency.start	 10e6 # phase frequency in Hz
#ExpParams.MicrowavePulse.frequency.end	     10e6 # phase frequency in Hz

# parameters for readout pulse
ExpParams.readoutPulse.deviceTag           readoutPulse # which device do these parameters pertain to?
ExpParams.readoutPulse.deviceName          AWG # which device do these parameters pertain to?
ExpParams.readoutPulse.pulseCH      	   1 #output channel for pulse device 
ExpParams.readoutPulse.time.start          [7;0;500;0;1e5;50;10]*1e-9 #in s
ExpParams.readoutPulse.time.end            [7;0;500;0;1e5;50;10]*1e-9 #in s
ExpParams.readoutPulse.amp.start           [0;0;1;1;0.2;0.2;0] #dimensionless
ExpParams.readoutPulse.amp.end             [0;0;1;1;0.2;0.2;0] #dimensionless
ExpParams.readoutPulse.maxAmp.start        0.1 #in V
ExpParams.readoutPulse.maxAmp.end          1 #in V
ExpParams.readoutPulse.offset.start        -.075 #in V
ExpParams.readoutPulse.offset.end          -.1 #in V
ExpParams.readoutPulse.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine

# parameters for trigger source
ExpParams.triggerSource.deviceTag           triggerSource # which device do these parameters pertain to?
ExpParams.triggerSource.deviceName          AWG # which device do these parameters pertain to?
ExpParams.triggerSource.pulseCH      	    1 #output channel for pulse device 
ExpParams.triggerSource.time.start          [0;0;300;0;10]*1e-9 #in s
ExpParams.triggerSource.time.end            [0;0;300;0;10]*1e-9 #in s
ExpParams.triggerSource.amp.start           [0;0;1;1;0] #dimensionless
ExpParams.triggerSource.amp.end             [0;0;1;1;0] #dimensionless
ExpParams.triggerSource.maxAmp.start        1.5 #in V
ExpParams.triggerSource.maxAmp.end          1.5 #in V
ExpParams.triggerSource.offset.start        0 #in V
ExpParams.triggerSource.offset.end          0 #in V
ExpParams.triggerSource.sinusoid            0 # [0 1] if true the envelope pulse is multiplied by a sine


#######################################################################

ExpParams.muwave1.deviceTag            muwave1
ExpParams.muwave1.deviceName           CWSource
ExpParams.muwave1.frequency.start      3 # min frequency in GHz
ExpParams.muwave1.frequency.end        4 # max frequency in GHz
ExpParams.muwave1.power.start          -10 # min frequency in dBm
ExpParams.muwave1.power.end            -5 # max frequency in dBm

ExpParams.muwave2.deviceTag            muwave2
ExpParams.muwave2.deviceName           CWSource
ExpParams.muwave2.frequency.start      3 # min frequency in GHz
ExpParams.muwave2.frequency.end        4 # max frequency in GHz
ExpParams.muwave2.power.start          -10 # min frequency in dBm
ExpParams.muwave2.power.end            -5 # max frequency in dBm

ExpParams.muwave3.deviceTag            muwave3
ExpParams.muwave3.deviceName           CWSource
ExpParams.muwave3.frequency.start      3 # min frequency in GHz
ExpParams.muwave3.frequency.end        4 # max frequency in GHz
ExpParams.muwave3.power.start          -10 # min frequency in dBm
ExpParams.muwave3.power.end            -5 # max frequency in dBm

#######################################################################
#######################  Init Params ##################################
#######################################################################

InitParams.fluxPulse.device             AWG
InitParams.fluxPulse.RefOsc             External #reference oscillator can be 'External' or 'Internal'
InitParams.fluxPulse.samplingRate       1.2e9 #in Samp/sec
InitParams.fluxPulse.RunMode            Triggered # [Sequence Continuous Triggered]
InitParams.fluxPulse.LoopCount          500 # number of times to execute the waveform sequence
InitParams.fluxPulse.WaveformDuration   200e-6 # in s
InitParams.fluxPulse.DontReprogram      0 # is this flag equals 1 the AWG will not be initialized
   
InitParams.readoutPulse.device              AWG
InitParams.readoutPulse.OutputLoad          50 # Output load in Ohms (1-1e4)
InitParams.readoutPulse.TriggerSource       EXT #{IMMediate|EXTernal|BUS}
InitParams.readoutPulse.WaveformDuration    1.5e-4 # in s
InitParams.readoutPulse.samplingRate        10e6 #in Samp/sec
InitParams.readoutPulse.numWaveforms        1

InitParams.triggerSource.device             AWG
InitParams.triggerSource.OutputLoad         50 # Output load in Ohms (1-1e4)
InitParams.triggerSource.TriggerSource      BUS #{IMMediate|EXTernal|BUS}
InitParams.triggerSource.WaveformDuration   1.5e-3 # in s
InitParams.triggerSource.samplingRate       10e6 #in Samp/sec
InitParams.triggerSource.numWaveforms       1000

InitParams.counter.device                  counter # which device do these parameters pertain to?
InitParams.counter.CH                      1 #input channle for coutner
InitParams.counter.MeasMode                SampleAndHold #counter config 'SampleAndHold' or 'TimeOfFlight'
InitParams.counter.Coupling                DC # AC or DC
InitParams.counter.Attenuation             1 # 1 or 10 times attenutation
InitParams.counter.Impedence               50 # [50 ???] Ohm impedence
InitParams.counter.TriggerLevel            0.1 # trigger level in V
InitParams.counter.RefOsc                  Int # ['Ext' 'Int']

InitParams.muwave1.device                    CWSource

InitParams.muwave2.device                    CWSource

InitParams.muwave3.device                    CWSource

#######################################################################
########################## Instr Params ###############################
#######################################################################

# Instrument paramters
InstrParams.AWG.deviceName              {'tek5014';'Agilent33220A';'Agilent33220A'} #[tek5014 DACII Agilent33220A]
InstrParams.AWG.tag                     {'fluxPulse';'readoutPulse';'triggerSource'}
InstrParams.AWG.VISA_string             TCPIP::128.33.89.4::4000::SOCKET #Tek VISA string
InstrParams.AWG.driver                  2 #[1 2] 1 - tektronix IVI driver (depricated) 2- GPIB commands over ethernet
InstrParams.AWG.Address                 {0;7;6} # GPIB address

InstrParams.counter.deviceName          {'Agilent53131A'} #[Agilent53131A]
InstrParams.counter.tag                 {'counter'}
InstrParams.counter.Address             {4} #counter GPIB address

InstrParams.CWSource.deviceName         {'HP8673B';'AgilentE8257D';'AgilentE8241A'} #[HP8673B AgilentE8257D AgilentE8241A]
InstrParams.CWSource.tag                {'muwave1';'muwave2';'muwave3'}
InstrParams.CWSource.Address            {19;15;14}

# The gpib substructure contains parameters used by the generic GPIB class
InstrParams.gpib.vendor                 ni #GPIB board vendor
InstrParams.gpib.boardindex             0  #GPIB board index
