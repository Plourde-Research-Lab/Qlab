--- AgilentE8363C-auto.m	2009-10-12 14:21:34.580846800 -0400
+++ AgilentE8363C-auto-tuned.m	2009-10-12 14:22:31.861730200 -0400
@@ -96,17 +96,23 @@
             gpib_string = ':CALCulate:MARKer:AOFF';
             obj.Write(gpib_string);
         end
-        function define_measurement(obj, value)
+        function define_measurement(obj, valuea, valueb)
         %DEFINE_MEASUREMENT
             gpib_string = ':CALCulate:PARameter:DEFine:EXTended';
             % Validate input
-            check_val = class(value);
-            checkMapObj = containers.Map({'numeric','integer','float','single','double'},{1,1,1,1,1});
-            if not (checkMapObj.isKey(check_val))
+            check_vala = class(valuea);
+            checkMapObja = containers.Map({'char'},{1});
+            if not (checkMapObja.isKey(check_vala))
                 error('Invalid input');
             end
 
-            gpib_string = [gpib_string ' ' num2str(value)];
+            check_valb = class(valueb);
+            checkMapObjb = containers.Map({'char'},{1});
+            if not (checkMapObjb.isKey(check_valb))
+                error('Invalid input');
+            end
+
+            gpib_string = [gpib_string ' ' valuea ',' valueb];
             obj.Write(gpib_string);
         end
         function delete_all_measurements(obj)
@@ -119,12 +125,12 @@
             gpib_string = ':CALCulate:PARameter:DELete:NAME';
             % Validate input
             check_val = class(value);
-            checkMapObj = containers.Map({'numeric','integer','float','single','double'},{1,1,1,1,1});
+            checkMapObj = containers.Map({'char'},{1});
             if not (checkMapObj.isKey(check_val))
                 error('Invalid input');
             end
 
-            gpib_string = [gpib_string ' ' num2str(value)];
+            gpib_string = [gpib_string ' ' value];
             obj.Write(gpib_string);
         end
     end % end methods
@@ -144,7 +150,7 @@
         end
         function val = get.sweep_data(obj)
             gpib_string = ':CALCulate:DATA';
-            val = obj.Query([gpib_string '?']);
+            val = obj.Query([gpib_string '? SDATA']);
         end
         function val = get.marker1_state(obj)
             gpib_string = ':CALCulate:MARKer1:STATe';
@@ -270,12 +276,12 @@
             
             % Validate input
             check_val = class(value);
-            checkMapObj = containers.Map({'numeric','integer','float','single','double'},{1,1,1,1,1});
+            checkMapObj = containers.Map({'char'},{1});
             if not (checkMapObj.isKey(check_val))
                 error('Invalid input');
             end
 
-            gpib_string = [gpib_string ' ' num2str(value)];
+            gpib_string = [gpib_string ' ' value];
             obj.Write(gpib_string);
             obj.select_measurement = value;
         end
